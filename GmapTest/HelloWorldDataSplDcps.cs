/**
 * This file is auto-generated by idlpp
 * 
 * Source: HelloWorldData.idl
 * Generated on: 2020-02-21T11:55:38-0500
 * OpenSplice 6.10.3
 */
using DDS;
using DDS.OpenSplice.CustomMarshalers;
using DDS.OpenSplice.Database;
using DDS.OpenSplice.Kernel;
using System;
using System.Runtime.InteropServices;

namespace HelloWorldData
{
    #region __Msg
    [StructLayout(LayoutKind.Sequential)]
    public struct __Msg
    {
        public int userID;
        public IntPtr message;
        public double longitude_ul;
        public double lattitued_ul;
        public double longitude_lr;
        public double lattitude_lr;
    }
    #endregion

    #region __MsgMarshaler
    public sealed class __MsgMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<HelloWorldData.Msg>
    {
        public static readonly string fullyScopedName = "HelloWorldData::Msg";

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            HelloWorldData.Msg fromData = tmpGCHandle.Target as HelloWorldData.Msg;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, HelloWorldData.Msg from, System.IntPtr to)
        {
            __Msg nativeImg = new __Msg();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, HelloWorldData.Msg from, ref __Msg to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            to.userID = from.userID;
            if (from.message == null) return V_COPYIN_RESULT.INVALID;
            // Unbounded string: bounds check not required...
            if (!Write(c.getBase(typePtr), ref to.message, from.message)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
            to.longitude_ul = from.longitude_ul;
            to.lattitued_ul = from.lattitued_ul;
            to.longitude_lr = from.longitude_lr;
            to.lattitude_lr = from.lattitude_lr;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __Msg nativeImg = (__Msg) Marshal.PtrToStructure(from, typeof(__Msg));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            HelloWorldData.Msg toObj = tmpGCHandleTo.Target as HelloWorldData.Msg;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref HelloWorldData.Msg to)
        {
            __Msg nativeImg = (__Msg) Marshal.PtrToStructure(from, typeof(__Msg));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref HelloWorldData.Msg to)
        {
            __Msg nativeImg = (__Msg) Marshal.PtrToStructure(from, typeof(__Msg));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __Msg from, ref HelloWorldData.Msg to)
        {
            if (to == null) {
                to = new HelloWorldData.Msg();
            }
            to.userID = from.userID;
            to.message = ReadString(from.message);
            to.longitude_ul = from.longitude_ul;
            to.lattitued_ul = from.lattitued_ul;
            to.longitude_lr = from.longitude_lr;
            to.lattitude_lr = from.lattitude_lr;
        }

    }
    #endregion

}

#region __Aircraft
[StructLayout(LayoutKind.Sequential)]
public struct __Aircraft
{
    public IntPtr tailNumber;
    public uint aircraftID;
}
#endregion

#region __AircraftMarshaler
public sealed class __AircraftMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<Aircraft>
{
    public static readonly string fullyScopedName = "Aircraft";

    public override void InitEmbeddedMarshalers(IDomainParticipant participant)
    {
    }

    public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
    {
        GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
        Aircraft fromData = tmpGCHandle.Target as Aircraft;
        return CopyIn(typePtr, fromData, to);
    }

    public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, Aircraft from, System.IntPtr to)
    {
        __Aircraft nativeImg = new __Aircraft();
        V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
        if (result == V_COPYIN_RESULT.OK)
        {
            Marshal.StructureToPtr(nativeImg, to, false);
        }
        return result;
    }

    public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, Aircraft from, ref __Aircraft to)
    {
        if (from == null) return V_COPYIN_RESULT.INVALID;
        if (from.tailNumber == null) return V_COPYIN_RESULT.INVALID;
        // Unbounded string: bounds check not required...
        if (!Write(c.getBase(typePtr), ref to.tailNumber, from.tailNumber)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
        to.aircraftID = from.aircraftID;
        return V_COPYIN_RESULT.OK;
    }

    public override void CopyOut(System.IntPtr from, System.IntPtr to)
    {
        __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
        GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
        Aircraft toObj = tmpGCHandleTo.Target as Aircraft;
        CopyOut(ref nativeImg, ref toObj);
        tmpGCHandleTo.Target = toObj;
    }

    public override void CopyOut(System.IntPtr from, ref Aircraft to)
    {
        __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
        CopyOut(ref nativeImg, ref to);
    }

    public static void StaticCopyOut(System.IntPtr from, ref Aircraft to)
    {
        __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
        CopyOut(ref nativeImg, ref to);
    }

    public static void CopyOut(ref __Aircraft from, ref Aircraft to)
    {
        if (to == null) {
            to = new Aircraft();
        }
        to.tailNumber = ReadString(from.tailNumber);
        to.aircraftID = from.aircraftID;
    }

}
#endregion

namespace DM
{
    #region __l_WGS84
    [StructLayout(LayoutKind.Sequential)]
    public struct __l_WGS84
    {
        public double Altitude;
        public double Latitude;
        public double Longitude;
    }
    #endregion

    #region __l_WGS84Marshaler
    public sealed class __l_WGS84Marshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.l_WGS84>
    {
        public static readonly string fullyScopedName = "DM::l_WGS84";

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.l_WGS84 fromData = tmpGCHandle.Target as DM.l_WGS84;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.l_WGS84 from, System.IntPtr to)
        {
            __l_WGS84 nativeImg = new __l_WGS84();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.l_WGS84 from, ref __l_WGS84 to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            to.Altitude = from.Altitude;
            to.Latitude = from.Latitude;
            to.Longitude = from.Longitude;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __l_WGS84 nativeImg = (__l_WGS84) Marshal.PtrToStructure(from, typeof(__l_WGS84));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.l_WGS84 toObj = tmpGCHandleTo.Target as DM.l_WGS84;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.l_WGS84 to)
        {
            __l_WGS84 nativeImg = (__l_WGS84) Marshal.PtrToStructure(from, typeof(__l_WGS84));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.l_WGS84 to)
        {
            __l_WGS84 nativeImg = (__l_WGS84) Marshal.PtrToStructure(from, typeof(__l_WGS84));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __l_WGS84 from, ref DM.l_WGS84 to)
        {
            if (to == null) {
                to = new DM.l_WGS84();
            }
            to.Altitude = from.Altitude;
            to.Latitude = from.Latitude;
            to.Longitude = from.Longitude;
        }

    }
    #endregion

    #region __EGI_Data
    [StructLayout(LayoutKind.Sequential)]
    public struct __EGI_Data
    {
        public DM.__l_WGS84 position;
        public double time;
    }
    #endregion

    #region __EGI_DataMarshaler
    public sealed class __EGI_DataMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.EGI_Data>
    {
        public static readonly string fullyScopedName = "DM::EGI_Data";
        private DM.__l_WGS84Marshaler attr0Marshaler;

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
            if (attr0Marshaler == null) {
                attr0Marshaler = DatabaseMarshaler.GetMarshaler(participant, typeof(DM.__l_WGS84)) as DM.__l_WGS84Marshaler;
                if (attr0Marshaler == null) {
                    attr0Marshaler = new DM.__l_WGS84Marshaler();
                    DatabaseMarshaler.Add(participant, typeof(DM.__l_WGS84), attr0Marshaler);
                    attr0Marshaler.InitEmbeddedMarshalers(participant);
                }
            }
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.EGI_Data fromData = tmpGCHandle.Target as DM.EGI_Data;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.EGI_Data from, System.IntPtr to)
        {
            __EGI_Data nativeImg = new __EGI_Data();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.EGI_Data from, ref __EGI_Data to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            {
                V_COPYIN_RESULT result = attr0Marshaler.CopyIn(typePtr, from.position, ref to.position);
                if (result != V_COPYIN_RESULT.OK) return result;
            }
            to.time = from.time;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __EGI_Data nativeImg = (__EGI_Data) Marshal.PtrToStructure(from, typeof(__EGI_Data));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.EGI_Data toObj = tmpGCHandleTo.Target as DM.EGI_Data;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.EGI_Data to)
        {
            __EGI_Data nativeImg = (__EGI_Data) Marshal.PtrToStructure(from, typeof(__EGI_Data));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.EGI_Data to)
        {
            __EGI_Data nativeImg = (__EGI_Data) Marshal.PtrToStructure(from, typeof(__EGI_Data));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __EGI_Data from, ref DM.EGI_Data to)
        {
            if (to == null) {
                to = new DM.EGI_Data();
            }
            DM.__l_WGS84Marshaler.CopyOut(ref from.position, ref to.position);
            to.time = from.time;
        }

    }
    #endregion

    #region __ATC_Data
    [StructLayout(LayoutKind.Sequential)]
    public struct __ATC_Data
    {
        public uint aircraftID;
        public IntPtr tailNumber;
        public DM.__l_WGS84 position;
        public double time;
    }
    #endregion

    #region __ATC_DataMarshaler
    public sealed class __ATC_DataMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.ATC_Data>
    {
        public static readonly string fullyScopedName = "DM::ATC_Data";
        private DM.__l_WGS84Marshaler attr2Marshaler;

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
            if (attr2Marshaler == null) {
                attr2Marshaler = DatabaseMarshaler.GetMarshaler(participant, typeof(DM.__l_WGS84)) as DM.__l_WGS84Marshaler;
                if (attr2Marshaler == null) {
                    attr2Marshaler = new DM.__l_WGS84Marshaler();
                    DatabaseMarshaler.Add(participant, typeof(DM.__l_WGS84), attr2Marshaler);
                    attr2Marshaler.InitEmbeddedMarshalers(participant);
                }
            }
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.ATC_Data fromData = tmpGCHandle.Target as DM.ATC_Data;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.ATC_Data from, System.IntPtr to)
        {
            __ATC_Data nativeImg = new __ATC_Data();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.ATC_Data from, ref __ATC_Data to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            to.aircraftID = from.aircraftID;
            if (from.tailNumber == null) return V_COPYIN_RESULT.INVALID;
            // Unbounded string: bounds check not required...
            if (!Write(c.getBase(typePtr), ref to.tailNumber, from.tailNumber)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
            {
                V_COPYIN_RESULT result = attr2Marshaler.CopyIn(typePtr, from.position, ref to.position);
                if (result != V_COPYIN_RESULT.OK) return result;
            }
            to.time = from.time;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __ATC_Data nativeImg = (__ATC_Data) Marshal.PtrToStructure(from, typeof(__ATC_Data));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.ATC_Data toObj = tmpGCHandleTo.Target as DM.ATC_Data;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.ATC_Data to)
        {
            __ATC_Data nativeImg = (__ATC_Data) Marshal.PtrToStructure(from, typeof(__ATC_Data));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.ATC_Data to)
        {
            __ATC_Data nativeImg = (__ATC_Data) Marshal.PtrToStructure(from, typeof(__ATC_Data));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __ATC_Data from, ref DM.ATC_Data to)
        {
            if (to == null) {
                to = new DM.ATC_Data();
            }
            to.aircraftID = from.aircraftID;
            to.tailNumber = ReadString(from.tailNumber);
            DM.__l_WGS84Marshaler.CopyOut(ref from.position, ref to.position);
            to.time = from.time;
        }

    }
    #endregion

    #region __ATC_Function
    [StructLayout(LayoutKind.Sequential)]
    public struct __ATC_Function
    {
        public IntPtr tailNumber;
        public DM.__l_WGS84 position;
        public double time;
        public uint aircraftID;
        public DM.__EGI_Data sensor;
        public __Aircraft aircraft;
    }
    #endregion

    #region __ATC_FunctionMarshaler
    public sealed class __ATC_FunctionMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.ATC_Function>
    {
        public static readonly string fullyScopedName = "DM::ATC_Function";
        private DM.__l_WGS84Marshaler attr1Marshaler;
        private DM.__EGI_DataMarshaler attr4Marshaler;
        private __AircraftMarshaler attr5Marshaler;

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
            if (attr1Marshaler == null) {
                attr1Marshaler = DatabaseMarshaler.GetMarshaler(participant, typeof(DM.__l_WGS84)) as DM.__l_WGS84Marshaler;
                if (attr1Marshaler == null) {
                    attr1Marshaler = new DM.__l_WGS84Marshaler();
                    DatabaseMarshaler.Add(participant, typeof(DM.__l_WGS84), attr1Marshaler);
                    attr1Marshaler.InitEmbeddedMarshalers(participant);
                }
            }
            if (attr4Marshaler == null) {
                attr4Marshaler = DatabaseMarshaler.GetMarshaler(participant, typeof(DM.__EGI_Data)) as DM.__EGI_DataMarshaler;
                if (attr4Marshaler == null) {
                    attr4Marshaler = new DM.__EGI_DataMarshaler();
                    DatabaseMarshaler.Add(participant, typeof(DM.__EGI_Data), attr4Marshaler);
                    attr4Marshaler.InitEmbeddedMarshalers(participant);
                }
            }
            if (attr5Marshaler == null) {
                attr5Marshaler = DatabaseMarshaler.GetMarshaler(participant, typeof(__Aircraft)) as __AircraftMarshaler;
                if (attr5Marshaler == null) {
                    attr5Marshaler = new __AircraftMarshaler();
                    DatabaseMarshaler.Add(participant, typeof(__Aircraft), attr5Marshaler);
                    attr5Marshaler.InitEmbeddedMarshalers(participant);
                }
            }
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.ATC_Function fromData = tmpGCHandle.Target as DM.ATC_Function;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.ATC_Function from, System.IntPtr to)
        {
            __ATC_Function nativeImg = new __ATC_Function();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.ATC_Function from, ref __ATC_Function to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            if (from.tailNumber == null) return V_COPYIN_RESULT.INVALID;
            // Unbounded string: bounds check not required...
            if (!Write(c.getBase(typePtr), ref to.tailNumber, from.tailNumber)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
            {
                V_COPYIN_RESULT result = attr1Marshaler.CopyIn(typePtr, from.position, ref to.position);
                if (result != V_COPYIN_RESULT.OK) return result;
            }
            to.time = from.time;
            to.aircraftID = from.aircraftID;
            {
                V_COPYIN_RESULT result = attr4Marshaler.CopyIn(typePtr, from.sensor, ref to.sensor);
                if (result != V_COPYIN_RESULT.OK) return result;
            }
            {
                V_COPYIN_RESULT result = attr5Marshaler.CopyIn(typePtr, from.aircraft, ref to.aircraft);
                if (result != V_COPYIN_RESULT.OK) return result;
            }
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __ATC_Function nativeImg = (__ATC_Function) Marshal.PtrToStructure(from, typeof(__ATC_Function));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.ATC_Function toObj = tmpGCHandleTo.Target as DM.ATC_Function;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.ATC_Function to)
        {
            __ATC_Function nativeImg = (__ATC_Function) Marshal.PtrToStructure(from, typeof(__ATC_Function));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.ATC_Function to)
        {
            __ATC_Function nativeImg = (__ATC_Function) Marshal.PtrToStructure(from, typeof(__ATC_Function));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __ATC_Function from, ref DM.ATC_Function to)
        {
            if (to == null) {
                to = new DM.ATC_Function();
            }
            to.tailNumber = ReadString(from.tailNumber);
            DM.__l_WGS84Marshaler.CopyOut(ref from.position, ref to.position);
            to.time = from.time;
            to.aircraftID = from.aircraftID;
            DM.__EGI_DataMarshaler.CopyOut(ref from.sensor, ref to.sensor);
            __AircraftMarshaler.CopyOut(ref from.aircraft, ref to.aircraft);
        }

    }
    #endregion

    #region __Aircraft
    [StructLayout(LayoutKind.Sequential)]
    public struct __Aircraft
    {
        public IntPtr tailNumber;
        public uint aircraftID;
    }
    #endregion

    #region __AircraftMarshaler
    public sealed class __AircraftMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.Aircraft>
    {
        public static readonly string fullyScopedName = "DM::Aircraft";

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.Aircraft fromData = tmpGCHandle.Target as DM.Aircraft;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.Aircraft from, System.IntPtr to)
        {
            __Aircraft nativeImg = new __Aircraft();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.Aircraft from, ref __Aircraft to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            if (from.tailNumber == null) return V_COPYIN_RESULT.INVALID;
            // Unbounded string: bounds check not required...
            if (!Write(c.getBase(typePtr), ref to.tailNumber, from.tailNumber)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
            to.aircraftID = from.aircraftID;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.Aircraft toObj = tmpGCHandleTo.Target as DM.Aircraft;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.Aircraft to)
        {
            __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.Aircraft to)
        {
            __Aircraft nativeImg = (__Aircraft) Marshal.PtrToStructure(from, typeof(__Aircraft));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __Aircraft from, ref DM.Aircraft to)
        {
            if (to == null) {
                to = new DM.Aircraft();
            }
            to.tailNumber = ReadString(from.tailNumber);
            to.aircraftID = from.aircraftID;
        }

    }
    #endregion

    #region __Aircraft_Config
    [StructLayout(LayoutKind.Sequential)]
    public struct __Aircraft_Config
    {
        public uint aircraftID;
        public IntPtr tailNumber;
    }
    #endregion

    #region __Aircraft_ConfigMarshaler
    public sealed class __Aircraft_ConfigMarshaler : DDS.OpenSplice.CustomMarshalers.FooDatabaseMarshaler<DM.Aircraft_Config>
    {
        public static readonly string fullyScopedName = "DM::Aircraft_Config";

        public override void InitEmbeddedMarshalers(IDomainParticipant participant)
        {
        }

        public override V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, System.IntPtr from, System.IntPtr to)
        {
            GCHandle tmpGCHandle = GCHandle.FromIntPtr(from);
            DM.Aircraft_Config fromData = tmpGCHandle.Target as DM.Aircraft_Config;
            return CopyIn(typePtr, fromData, to);
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.Aircraft_Config from, System.IntPtr to)
        {
            __Aircraft_Config nativeImg = new __Aircraft_Config();
            V_COPYIN_RESULT result = CopyIn(typePtr, from, ref nativeImg);
            if (result == V_COPYIN_RESULT.OK)
            {
                Marshal.StructureToPtr(nativeImg, to, false);
            }
            return result;
        }

        public V_COPYIN_RESULT CopyIn(System.IntPtr typePtr, DM.Aircraft_Config from, ref __Aircraft_Config to)
        {
            if (from == null) return V_COPYIN_RESULT.INVALID;
            to.aircraftID = from.aircraftID;
            if (from.tailNumber == null) return V_COPYIN_RESULT.INVALID;
            // Unbounded string: bounds check not required...
            if (!Write(c.getBase(typePtr), ref to.tailNumber, from.tailNumber)) return V_COPYIN_RESULT.OUT_OF_MEMORY;
            return V_COPYIN_RESULT.OK;
        }

        public override void CopyOut(System.IntPtr from, System.IntPtr to)
        {
            __Aircraft_Config nativeImg = (__Aircraft_Config) Marshal.PtrToStructure(from, typeof(__Aircraft_Config));
            GCHandle tmpGCHandleTo = GCHandle.FromIntPtr(to);
            DM.Aircraft_Config toObj = tmpGCHandleTo.Target as DM.Aircraft_Config;
            CopyOut(ref nativeImg, ref toObj);
            tmpGCHandleTo.Target = toObj;
        }

        public override void CopyOut(System.IntPtr from, ref DM.Aircraft_Config to)
        {
            __Aircraft_Config nativeImg = (__Aircraft_Config) Marshal.PtrToStructure(from, typeof(__Aircraft_Config));
            CopyOut(ref nativeImg, ref to);
        }

        public static void StaticCopyOut(System.IntPtr from, ref DM.Aircraft_Config to)
        {
            __Aircraft_Config nativeImg = (__Aircraft_Config) Marshal.PtrToStructure(from, typeof(__Aircraft_Config));
            CopyOut(ref nativeImg, ref to);
        }

        public static void CopyOut(ref __Aircraft_Config from, ref DM.Aircraft_Config to)
        {
            if (to == null) {
                to = new DM.Aircraft_Config();
            }
            to.aircraftID = from.aircraftID;
            to.tailNumber = ReadString(from.tailNumber);
        }

    }
    #endregion

}

